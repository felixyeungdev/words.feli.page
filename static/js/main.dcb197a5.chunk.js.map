{"version":3,"sources":["wordsAPI.js","App.js","reportWebVitals.js","index.js"],"names":["WordsAPI","word","fetch","result","json","console","log","App","useState","isLoading","setIsLoading","currentWord","setCurrentWord","definition","setDefinition","useEffect","a","getWord","CssBaseline","AppBar","position","color","Toolbar","Typography","variant","LinearProgress","style","height","Grid","container","spacing","direction","alignItems","justify","marginTop","Card","width","minWidth","onSubmit","e","preventDefault","target","value","CardContent","TextField","id","label","fullWidth","required","disabled","CardActions","Button","type","marginBottom","whiteSpace","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","primary","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"yXAceA,E,8IAbUC,G,gGAEQC,MAAM,8CAAD,OACwBD,I,cAD5CE,E,gBAGOA,EAAOC,O,+EAEpBC,QAAQC,IAAR,uD,kBACO,M,uHCsGJC,MA/Ff,WAAgB,IAAD,EACuBC,oBAAS,kBAAM,KADtC,mBACJC,EADI,KACOC,EADP,OAE2BF,oBAAS,iBAAM,MAF1C,mBAEJG,EAFI,KAESC,EAFT,OAGyBJ,mBAAS,MAHlC,mBAGJK,EAHI,KAGQC,EAHR,KAoBX,OAXAC,qBAAU,WACDJ,IACLN,QAAQC,IAAR,mBAAwBK,IACxB,sBAAC,4BAAAK,EAAA,6DACGN,GAAa,GADhB,SAEwBV,EAASiB,QAAQN,GAFzC,OAESR,EAFT,OAGGO,GAAa,GACbI,EAAcX,GAJjB,0CAAD,MAMD,CAACQ,IAGA,qCACI,cAACO,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,UAAhC,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,uBAGPf,EACG,cAACgB,EAAA,EAAD,IAEA,qBAAKC,MAAO,CAAEC,OAAQ,SAE1B,eAACC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,WAAW,SACXC,QAAQ,SACRP,MAAO,CAAEQ,UAAW,QANxB,UAQI,cAACC,EAAA,EAAD,CACIC,MAAM,OACNV,MAAO,CACHW,SAAU,SAHlB,SAMI,uBAAMC,SA3CtB,SAAsBC,GAClBA,EAAEC,iBACF5B,EAAe2B,EAAEE,OAAOxC,KAAKyC,QAyCjB,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,GAAG,OACHC,MAAM,OACNtB,QAAQ,SACRuB,WAAS,EACTC,UAAQ,EACRC,SAAUxC,MAGlB,cAACyC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACI9B,MAAM,UACNG,QAAQ,YACR4B,KAAK,SACL1B,MAAO,CACHQ,UAAW,QAEfe,SAAUxC,EAPd,2BAcXI,EACG,cAACsB,EAAA,EAAD,CAAMT,MAAO,CAAEQ,UAAW,OAAQmB,aAAc,QAAhD,SACI,cAACV,EAAA,EAAD,UACI,cAACpB,EAAA,EAAD,CAAYC,QAAQ,QAApB,SACI,qBACIE,MAAO,CACH4B,WAAY,YAFpB,SAKKC,KAAKC,UAAU3C,EAAY,KAAM,WAMlD,UC5FL4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iBCKRQ,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAAS,CAAEC,KAAM,cAIzBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACC,EAAA,EAAD,CAAeR,MAAOA,EAAtB,SACI,cAAC,EAAD,QAGRS,SAASC,eAAe,SAM5BnB,M","file":"static/js/main.dcb197a5.chunk.js","sourcesContent":["class WordsAPI {\n    static async getWord(word) {\n        try {\n            const result = await fetch(\n                `https://api.feli.page/v1/words/define?word=${word}`\n            );\n            return await result.json();\n        } catch (error) {\n            console.log(`Error while fetching word definition: ${error}`);\n            return null;\n        }\n    }\n}\n\nexport default WordsAPI;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport WordsAPI from \"./wordsAPI\";\n\nfunction App() {\n    const [isLoading, setIsLoading] = useState(() => false);\n    const [currentWord, setCurrentWord] = useState(() => \"\");\n    const [definition, setDefinition] = useState(null);\n    function handleSubmit(e) {\n        e.preventDefault();\n        setCurrentWord(e.target.word.value);\n    }\n\n    useEffect(() => {\n        if (!currentWord) return;\n        console.log(`New word ${currentWord}`);\n        (async () => {\n            setIsLoading(true);\n            const result = await WordsAPI.getWord(currentWord);\n            setIsLoading(false);\n            setDefinition(result);\n        })();\n    }, [currentWord]);\n\n    return (\n        <>\n            <CssBaseline></CssBaseline>\n            <AppBar position=\"sticky\" color=\"primary\">\n                <Toolbar>\n                    <Typography variant=\"h6\">Words</Typography>\n                </Toolbar>\n            </AppBar>\n            {isLoading ? (\n                <LinearProgress></LinearProgress>\n            ) : (\n                <div style={{ height: \"4px\" }}></div>\n            )}\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{ marginTop: \"16px\" }}\n            >\n                <Card\n                    width=\"100%\"\n                    style={{\n                        minWidth: \"350px\",\n                    }}\n                >\n                    <form onSubmit={handleSubmit}>\n                        <CardContent>\n                            <TextField\n                                id=\"word\"\n                                label=\"Word\"\n                                variant=\"filled\"\n                                fullWidth\n                                required\n                                disabled={isLoading}\n                            />\n                        </CardContent>\n                        <CardActions>\n                            <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                type=\"submit\"\n                                style={{\n                                    marginTop: \"16px\",\n                                }}\n                                disabled={isLoading}\n                            >\n                                Define\n                            </Button>\n                        </CardActions>\n                    </form>\n                </Card>\n                {definition ? (\n                    <Card style={{ marginTop: \"16px\", marginBottom: \"16px\" }}>\n                        <CardContent>\n                            <Typography variant=\"body1\">\n                                <pre\n                                    style={{\n                                        whiteSpace: \"pre-wrap\",\n                                    }}\n                                >\n                                    {JSON.stringify(definition, null, 4)}\n                                </pre>\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                ) : (\n                    \"\"\n                )}\n            </Grid>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport {\n    createMuiTheme,\n    // makeStyles,\n    ThemeProvider,\n} from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: { main: \"#f9a825\" },\n    },\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={theme}>\n            <App />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}